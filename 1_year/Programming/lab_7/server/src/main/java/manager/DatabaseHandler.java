package src.main.java.manager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import src.main.java.common.object.*;
import src.main.java.exception.InvalidDBOutputException;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;

public class DatabaseHandler {
    public static final Logger logger = LoggerFactory.getLogger(DatabaseHandler.class);
    private static final String pepper = "34fd*(skDG3@!kK";
    private static final String ADD_USER_REQUEST = "INSERT INTO USERS (username, password) VALUES (?, ?)";
    private static final String VALIDATE_USER_REQUEST = "SELECT COUNT(*) AS count FROM USERS WHERE username = ? AND password = ?";
    private static final String FIND_USERNAME_REQUEST = "SELECT COUNT(*) AS count FROM USERS WHERE username = ?";
    private static final String ADD_FLAT_REQUEST = "INSERT INTO FLAT (name, coordinate_x, coordinate_y, creationdate, area, numbers_of_rooms, numbers_of_bathrooms, furnish_type, transport_type, name_house_flat, creator_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    private static final String ADD_HOUSE_REQUEST = "INSERT INTO HOUSE (name_house, count_flats_on_floor, build_year) VALUES ( ?, ?, ?)";
    private static final String JOIN_FLAT_HOUSE_REQUEST = "SELECT * FROM FLAT INNER JOIN HOUSE ON FLAT.name_house_flat = HOUSE.name_house";
    private static final String CHECK_ID_FLAT_REQUEST = "SELECT COUNT(*) AS count FROM FlAT WHERE id = ?";

    private static final String DELETE_FlAT_TO_USER_TABLE = "DELETE FROM FlAT WHERE creator_id = ?";
    private static final String FIND_CREATOR_ID = "SELECT id_user FROM USERS WHERE username = ?";
    private static final String FIND_USER_ID = "SELECT id_user FROM USERS WHERE username = ?";
    private String URL;
    private String username;
    private String password;
    private Connection connection;
    private String currUser;
    private int addIdFlat;
    DataHasher dataHasher = new DataHasher();

    public DatabaseHandler(String URL, String username, String password) {
        this.username = username;
        this.password = password;
        this.URL = URL;
    }

    public void connetToDataBase() {
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException e) {
            logger.error("Не найден POSTGRESQL драйвер." + e);
        }
        try {
            connection = DriverManager.getConnection(URL, username, password);
            logger.info("Подключение к БД установлено.");
        } catch (SQLException e) {
            logger.error(String.valueOf(e));
        }
    }
//    public int getBaseID() throws SQLException {
//        PreparedStatement preparedStatementID;
//        ResultSet resultSet;
//        int nextID_from_seq = 1;
//        preparedStatementID = connection.prepareStatement(NEXT_ID);
//        resultSet = preparedStatementID.executeQuery();
//        if (resultSet.next()) {
//            nextID_from_seq = resultSet.getInt(1) +  1;
//            logger.info(nextID_from_seq + "- следующий");
//        }
//        logger.info(nextID_from_seq - 1 + "- теущий");
//        return nextID_from_seq;
//    }

    public PreparedStatement doPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException e) {
            if (connection == null) {
                System.out.println("Соединение с базой данных не установлено!");
            }
            throw new SQLException();
        }
    }


    public LinkedHashSet<Flat> loadCollectionFromDB() {
        LinkedHashSet<Flat> collection = new LinkedHashSet<>();
        try {
            PreparedStatement joinStatement = connection.prepareStatement(JOIN_FLAT_HOUSE_REQUEST);
            ResultSet result = joinStatement.executeQuery();

            while (result.next()) {
                try {
                    Flat f = extractFlatFromResult(result);
                    collection.add(f);
                } catch (InvalidDBOutputException e) {
                    logger.info("Неверный объект");
                    continue;
                }

            }

            joinStatement.close();
            logger.info("Коллекция успешно загружена из базы данных.");
        } catch (SQLException e) {
            logger.info("Произошла ошибка при загрузке коллекции из базы данных. Завершение работы.");
            logger.error(e.getMessage());
            System.exit(-1);
        }
        return collection;
    }
    public List<Integer> clearCollection() throws SQLException {
        List<Integer> flatIds = new ArrayList<>();
        Long idCreator = null;
        PreparedStatement ps1 = connection.prepareStatement(FIND_CREATOR_ID);
        ps1.setString(1, currUser);
        try (ResultSet res = ps1.executeQuery()) {
            if (res.next()) {
                idCreator = res.getLong("id_user"); // Получаем creator_id
            } else {
                logger.info("Пользователь с именем " + username + " не найден.");
                return null; // Выход, если пользователь не найден
            }
        }
        if (idCreator != null) {
            // Очистка таблицы flat по creator_id
            try (PreparedStatement clearFlatId = connection.prepareStatement("SELECT id FROM flat WHERE creator_id = ?")){
                clearFlatId.setLong(1, idCreator);
                ResultSet resultSet = clearFlatId.executeQuery();
                while (resultSet.next()) {
                    int flatId = resultSet.getInt("id");
                    flatIds.add(flatId);
                }
            }
            try (PreparedStatement prepareStatement = connection.prepareStatement(DELETE_FlAT_TO_USER_TABLE)) {
                prepareStatement.setLong(1, idCreator);
                int affectedRows = prepareStatement.executeUpdate();
                if (affectedRows != 0) {
                    logger.info(affectedRows + " записей удалено из таблицы flat для creator_id: " + idCreator);
                } else{
                    return null;
                }
            }

            // Сброс последовательности
            String sql = "ALTER SEQUENCE flat_id_seq RESTART WITH 1";
            try (PreparedStatement resetSeqStmt = connection.prepareStatement(sql)) {
                resetSeqStmt.executeUpdate();
                logger.info("Последовательность очищена.");
            }
        }
        return flatIds;
    }
//        ResultSet res = ps1.executeQuery();
//        Long idCreator = (long) res.getInt(1);
//        PreparedStatement prepareStatement = connection.prepareStatement(DELETE_USER_TABLE);
//        prepareStatement.setLong(1, idCreator);
//        ResultSet rs = prepareStatement.executeQuery();
//        String sql = "ALTER SEQUENCE flat_id_seq RESTART WITH 1";
//        connection.prepareStatement(sql);
//        logger.info("последовательность очищена");

    /*
    Загрузка коллекции из базы данных
     */
    private Flat extractFlatFromResult(ResultSet result) throws SQLException, InvalidDBOutputException {
        int flatId = result.getInt("id");
        if (flatId < 1) throw new InvalidDBOutputException();
        String name = result.getString("name");
        if (name == null || name.isEmpty()) throw new InvalidDBOutputException();
        long x = result.getLong("coordinate_x");
        long y = result.getLong("coordinate_y");
        LocalDate date = result.getDate("creationdate").toLocalDate();
        float area = result.getFloat("area");
        long num_rooms = result.getLong("numbers_of_rooms");
        int num_bathrooms = result.getInt("numbers_of_bathrooms");
        Furnish furnish = Furnish.valueOf(result.getString("furnish_type"));
        Transport transport = Transport.valueOf(result.getString("transport_type"));

        String name_house = result.getString("name_house");
        if (name_house == null || name_house.isEmpty()) throw new InvalidDBOutputException();
        int count_flats_on_floor = result.getInt("count_flats_on_floor");
        int build_year = result.getInt("build_year");

        House house = new House(name_house, count_flats_on_floor, build_year);
        Coordinates coordinates = new Coordinates(x, y);
        Flat flat = new Flat(flatId, name, coordinates, date, area, num_rooms, num_bathrooms, furnish, transport, house);
        return flat;
    }

    public boolean insertFlat(Flat f) {
        logger.info("currUser: " + currUser);
        String name = f.getName();
        Coordinates coordinates = f.getCoordinates();
        LocalDate creationDate = f.getCreationDate();
        float area = f.getArea();
        Long num_rooms = f.getNumberOfRooms();
        Integer num_bathrooms = f.getNumberOfBathrooms();
        Furnish furnish = f.getFurnish();
        Transport transport = f.getTransport();
        House house_curr = f.getHouse();

        try {
            PreparedStatement curr = connection.prepareStatement(FIND_USER_ID);
            curr.setString(1, currUser);
            ResultSet rs = curr.executeQuery();
            rs.next();
            logger.info("currUser: " + curr);
            long idCreator = rs.getLong("id_user");
            logger.info("idCreator: " + idCreator);
            connection.setAutoCommit(false);
            connection.setSavepoint();

            PreparedStatement houseName = connection.prepareStatement("SELECT name_house FROM house WHERE name_house = ?");
            houseName.setString(1, house_curr.getName());
            ResultSet rsHome = houseName.executeQuery();
            //проверка на существование house in DB
            if (!rsHome.next()){
                PreparedStatement addToHouseStatement = connection.prepareStatement(ADD_HOUSE_REQUEST);
                addToHouseStatement.setString(1, house_curr.getName());
                addToHouseStatement.setLong(2, house_curr.getNumberOfFlatsOnFloor());
                addToHouseStatement.setInt(3, house_curr.getYear());
                addToHouseStatement.executeUpdate();
                addToHouseStatement.close();
                logger.info("Дом создан");
            } else{
                logger.info("Дом с таким названием уже существует");
            }
            houseName.close();

            PreparedStatement addToFlatStatement = connection.prepareStatement(ADD_FLAT_REQUEST);
            addToFlatStatement.setString(1, name);
            addToFlatStatement.setDouble(2, coordinates.getX());
            addToFlatStatement.setLong(3, coordinates.getY());
            addToFlatStatement.setDate(4, Date.valueOf(creationDate));
            addToFlatStatement.setFloat(5, area);
            addToFlatStatement.setInt(6, Math.toIntExact(num_rooms));
            addToFlatStatement.setInt(7, num_bathrooms);
            addToFlatStatement.setString(8, furnish == null ? null : furnish.name());
            addToFlatStatement.setString(9, transport == null ? null : transport.name());
            addToFlatStatement.setString(10, house_curr.getName());
            addToFlatStatement.setLong(11, idCreator);
            logger.info("Добавление квартиры в БД прошло успешно");
            // находим id добавленного дома
            addToFlatStatement.executeUpdate();
            addToFlatStatement.close();
            PreparedStatement getIdFlat = connection.prepareStatement("SELECT id FROM flat WHERE flat.name = ?");
            getIdFlat.setString(1, name);
            ResultSet resultSetID = getIdFlat.executeQuery();
            logger.info("resultSetID " + resultSetID.next());
            addIdFlat = resultSetID.getInt(1);
            logger.info("ID: " + addIdFlat);
            getIdFlat.close();

            connection.commit();
            connection.setAutoCommit(true);

            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            rollback();
        }

        return false;
    }
    public int getAddIdFlat(){
        return addIdFlat;
    }

    public boolean removeFlatByID(int id) throws SQLException {
        Long idCreator = null;
        PreparedStatement ps1 = connection.prepareStatement(FIND_CREATOR_ID);
        ps1.setString(1, currUser);
        try (ResultSet res = ps1.executeQuery()) {
            if (res.next()) {
                idCreator = res.getLong("id_user"); // Получаем creator_id
                logger.info("idCreator: " + idCreator);
            } else {
                logger.info("Пользователь с именем " + username + " не найден.");
            }
            ps1.close();
        }
        // сделать проверку принадлежит ли эта квартира user
        try {
            PreparedStatement stmt1 = connection.prepareStatement("SELECT creator_id from flat where id = ?");
            stmt1.setInt(1, id);
            try (ResultSet res = stmt1.executeQuery()) {
                if (res.next()) {
                    long id_nat_creator = res.getInt(1);
                    logger.info("id_nat_creator: " + id_nat_creator);
                    if (id_nat_creator != idCreator) {
                        logger.info("Нет прав чтобы удалить объект с данным ID");
                        stmt1.close();
                        return false;
                    } else {
                        PreparedStatement stmt = connection.prepareStatement("DELETE FROM FlAT WHERE id = ?");
                        stmt.setInt(1, id);
                        logger.info("id удаления " + id);
                        int affectedRows = stmt.executeUpdate();
                        logger.info("Удалено строк: " + affectedRows);
                        stmt1.close();
                        return true;

                    }
                } else {
                    stmt1.close();
                    return false;
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
    public boolean updateFlat(Flat f) {
        logger.info("currUser: " + currUser);
        long flatId = f.getId();
        String name = f.getName();
        Coordinates coordinates = f.getCoordinates();
        LocalDate creationDate = f.getCreationDate();
        float area = f.getArea();
        Long num_rooms = f.getNumberOfRooms();
        Integer num_bathrooms = f.getNumberOfBathrooms();
        Furnish furnish = f.getFurnish();
        Transport transport = f.getTransport();
        House house_curr = f.getHouse();

        try {
            PreparedStatement curr = connection.prepareStatement(FIND_USER_ID);
            curr.setString(1, currUser);
            ResultSet rs = curr.executeQuery();
            rs.next();
            logger.info("currUser: " + curr);
            long idCreator = rs.getLong("id_user");
            logger.info("idCreator: " + idCreator);

            connection.setAutoCommit(false);
            connection.setSavepoint();

            // Проверка на существование дома
            PreparedStatement houseName = connection.prepareStatement("SELECT name_house FROM house WHERE name_house = ?");
            houseName.setString(1, house_curr.getName());
            ResultSet rsHome = houseName.executeQuery();

            if (!rsHome.next()) {
                logger.info("Дом не найден, создаем новый дом");
                PreparedStatement addToHouseStatement = connection.prepareStatement(ADD_HOUSE_REQUEST);
                addToHouseStatement.setString(1, house_curr.getName());
                addToHouseStatement.setLong(2, house_curr.getNumberOfFlatsOnFloor());
                addToHouseStatement.setInt(3, house_curr.getYear());
                addToHouseStatement.executeUpdate();
                addToHouseStatement.close();
                logger.info("Дом создан");
            } else {
                logger.info("Дом с таким названием уже существует");
            }
            houseName.close();

            // Обновление квартиры
            PreparedStatement updateFlatStatement = connection.prepareStatement("UPDATE flat SET name=?, coordinate_x=?, coordinate_y=?, creationdate=?, area=?, numbers_of_rooms=?, numbers_of_bathrooms=?, furnish_type=?, transport_type=?, name_house_flat=?, creator_id=? WHERE id = ?");
            updateFlatStatement.setString(1, name);
            updateFlatStatement.setDouble(2, coordinates.getX());
            updateFlatStatement.setLong(3, coordinates.getY());
            updateFlatStatement.setDate(4, Date.valueOf(creationDate));
            updateFlatStatement.setFloat(5, area);
            updateFlatStatement.setInt(6, Math.toIntExact(num_rooms));
            updateFlatStatement.setInt(7, num_bathrooms);
            updateFlatStatement.setString(8, furnish == null ? null : furnish.name());
            updateFlatStatement.setString(9, transport == null ? null : transport.name());
            updateFlatStatement.setString(10, house_curr.getName());
            updateFlatStatement.setLong(11, idCreator);
            updateFlatStatement.setLong(12, flatId);

            logger.info("Обновление квартиры в БД прошло успешно");
            updateFlatStatement.executeUpdate();
            updateFlatStatement.close();

            connection.commit();
            connection.setAutoCommit(true);

            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            rollback();
        }

        return false;
    }

    public boolean checkIdExistence(int id) throws SQLException {
        PreparedStatement checkId = connection.prepareStatement(CHECK_ID_FLAT_REQUEST);
        checkId.setLong(1, id);
        ResultSet resultSet = checkId.executeQuery();
        resultSet.next();
        logger.info(String.valueOf(id));
        if (resultSet.getInt(1) == 0) return false;
        else return true;
    }

    public boolean registerUser(String username, String password) throws SQLException {
        if (userExists(username)) return false;
        PreparedStatement addStatement = connection.prepareStatement(ADD_USER_REQUEST);
        addStatement.setString(1, username);
        addStatement.setString(2, DataHasher.hash(password + pepper)); //todo
        addStatement.executeUpdate();
        addStatement.close();
        currUser = username;
        logger.info("currUserREG: " + currUser);
        return true;
    }

    public boolean validateUser(String username, String password) throws SQLException {
        PreparedStatement findUserStatement = connection.prepareStatement(VALIDATE_USER_REQUEST);
        String hashedPassword = DataHasher.hash(password + pepper);
        findUserStatement.setString(1, username);
        findUserStatement.setString(2, hashedPassword);
        ResultSet result = findUserStatement.executeQuery();
        result.next();
        int count = result.getInt(1);
        logger.info(String.valueOf(count) + ": validateUser");
        findUserStatement.close();
        if (count == 1) {
            currUser = username;
            logger.info("currUserVAL: " + currUser);
            return true;
        }
        return false;
    }

    public boolean userExists(String username) throws SQLException {
        logger.info("userExists");
        PreparedStatement findStatement = connection.prepareStatement(FIND_USERNAME_REQUEST);
        findStatement.setString(1, username);
        ResultSet result = findStatement.executeQuery();
        result.next();
        int count = result.getInt(1);
        logger.info(String.valueOf(count));
        findStatement.close();
        if (count == 1) {
            currUser = username;
            return true;
        }
        return false;
    }


    public void rollback() {
        try {
            connection.rollback();
            connection.setAutoCommit(true);
        } catch (SQLException e) {
            logger.info("Не удалось откатить изменения.");
        }
    }
}

